{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","autoFocus","onChange","e","currentTarget","value","onBlur","updateUserStatus","onDoubleClick","ProfileInfo","profile","className","s","divContentImg","src","alt","descriptionBlock","photos","large","Preloader","Post","item","message","likesCount","ProfileAddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","maxLength10","maxLengthCreator","Element","MyPosts","postsElement","posts","map","p","key","id","reverse","postsBlock","profileMyPostsFormData","addPostHandler","profileMyPostsMessage","MyPostsContainer","connect","state","profilePage","dispatch","text","addPostAC","Profile","ProfileContainer","userId","Number","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","React","Component","mapDispatchToProps","compose","auth","isAuth","withRouter"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,iBAAmB,wC,oBCAxFD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,gLCiCVC,MA3Bf,SAAuBC,GAAgC,IAAD,EAElBC,oBAAkB,GAFA,mBAE3CC,EAF2C,KAEjCC,EAFiC,OAGtBF,mBAAiBD,EAAMI,QAHD,mBAG3CA,EAH2C,KAGnCC,EAHmC,KAgBlD,OAJAC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAGN,oCACKF,EACK,6BAAK,2BAAOK,WAAW,EAAMC,SATf,SAACC,GAAD,OAA4CJ,EAAUI,EAAEC,cAAcC,QASxBC,OAbxC,WAC9BT,GAAY,GACZH,EAAMa,iBAAiBT,IAYDO,MAAOP,KACnB,6BAAK,0BAAMU,cAhBO,kBAAMX,GAAY,KAgBgBH,EAAMI,QAAU,cCFvEW,EAdqC,SAAC,GAC2B,IAD1BC,EACyB,EADzBA,QAASZ,EACgB,EADhBA,OACNS,EAAsB,EAAtBA,iBACrD,OACI,6BACI,yBAAKI,UAAWC,IAAEC,eAAe,yBAAKF,UAAU,aAAaG,IAAI,GAAGC,IAAI,MACxE,yBAAKJ,UAAWC,IAAEI,kBACbN,EAAU,yBAAKI,IAAKJ,EAAQO,OAAOC,MAAOH,IAAI,KAAO,kBAACI,EAAA,EAAD,MAD1D,mBAGI,kBAAC,EAAD,CAAerB,OAAQA,EAAQS,iBAAkBA,O,4CCJlDa,MAZf,SAAc1B,GACV,OACI,yBAAKiB,UAAWC,IAAES,MACd,yBAAKP,IAAI,4FAA4FC,IAAI,KACxGrB,EAAM4B,QACP,6BACI,sCADJ,IACuB5B,EAAM6B,c,iCCsBzC,IAAMC,EAA6BC,YAA+B,CAACC,KAAM,sBAAtCD,EAUnC,SAA+B/B,GAE3B,OACI,oCACI,0BAAMiC,SAAUjC,EAAMkC,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,EACXC,KAAM,wBACNC,YAAa,qBACbC,SAAU,CAACC,IAAUC,MAGhC,6BACI,kDAjBdA,EAAcC,YAAiB,IAE/BN,EAAWO,YAAQ,YAsBVC,MAhDf,SAAiB7C,GAEb,IAII8C,EAAe9C,EAAM+C,MAAMC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAEE,GAAIvB,QAASqB,EAAErB,QAASC,WAAYoB,EAAEpB,WAAYsB,GAAIF,EAAEE,QAAOC,UAEpH,OACI,yBAAKnC,UAAWC,IAAEmC,YAAY,wCAC1B,kBAACvB,EAAD,CAA4BG,SARnB,SAACqB,GACdtD,EAAMuD,eAAeD,EAAuBE,0BAQxC,yBAAKvC,UAAWC,IAAE6B,OACbD,K,QCKFW,EAFUC,aAXD,SAACC,GACrB,MAAO,CACHZ,MAAOY,EAAMC,YAAYb,UAGN,SAACc,GACxB,MAAO,CACHN,eAAe,SAACO,GAAD,OAAkBD,EAASE,YAAUD,QAInCJ,CAA6Cb,GCTvDmB,MATf,SAAiBhE,GACb,OACI,6BACI,kBAAC,EAAD,CAAagB,QAAShB,EAAMgB,QAASZ,OAAQJ,EAAMI,OAAQS,iBAAkBb,EAAMa,mBACnF,kBAAC,EAAD,Q,eCmBCoD,EAAb,kLAGQ,IAAIC,EAASC,OAAOC,KAAKpE,MAAMqE,MAAMC,OAAOJ,SAAW,KAClDA,IACDA,EAASE,KAAKpE,MAAMuE,mBACPH,KAAKpE,MAAMwE,QAAQC,KAAK,WAEzCL,KAAKpE,MAAM0E,eAAeR,GAC1BE,KAAKpE,MAAM2E,cAAcT,KATjC,+BAaQ,OACI,kBAAC,EAAD,CAASlD,QAASoD,KAAKpE,MAAMgB,QAASZ,OAAQgE,KAAKpE,MAAMI,OAAQS,iBAAkBuD,KAAKpE,MAAMa,uBAd1G,GAAsC+D,IAAMC,WA4BtCC,EAAqB,CACvBJ,mBACAC,kBACA9D,sBAGWkE,sBACXrB,aAhBoB,SAACC,GACrB,MAAO,CACH3C,QAAS2C,EAAMC,YAAY5C,QAC3BZ,OAAQuD,EAAMC,YAAYxD,OAC1BmE,iBAAkBZ,EAAMqB,KAAKd,OAC7Be,OAAQtB,EAAMqB,KAAKC,UAWEH,GACzBI,IAFWH,CAGdd","file":"static/js/3.f6f3c4fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"divContentImg\":\"ProfileInfo_divContentImg__3ruaB\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {useEffect, useState} from \"react\";\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nfunction ProfileStatus(props: ProfileStatusPropsType) {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n\n    const activateEditModeHandler = () => setEditMode(true)\n    const deActivateEditModeHandler = () => {\n        setEditMode(false)\n        props.updateUserStatus(status)\n    }\n    const statusChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    return (\n        <>\n            {editMode\n                ? <div><input autoFocus={true} onChange={statusChangeHandler} onBlur={deActivateEditModeHandler}\n                              value={status}/></div>\n                : <div><span onDoubleClick={activateEditModeHandler}>{props.status || '-------'}</span></div>}\n        </>\n    )\n\n}\n\nexport default ProfileStatus","import React from \"react\";\nimport s from './ProfileInfo.module.css'\nimport {ResponseProfilePageType} from \"../../../redux/profilePageReducer\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\n\ntype ProfileInfoPropsType = {\n    profile: ResponseProfilePageType | null\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status,\n                                                         updateUserStatus}) => {\n    return (\n        <div>\n            <div className={s.divContentImg}><img className='contentImg' src=\"\" alt=\"\"/></div>\n            <div className={s.descriptionBlock}>\n                {profile ? <img src={profile.photos.large} alt=\"\"/> : <Preloader/>}\n                ava + desription\n                <ProfileStatus status={status} updateUserStatus={updateUserStatus}/>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo","import React from \"react\";\nimport s from './Post.module.css'\nimport {StateProfilePagePostsItemType} from \"../../../../redux/profilePageReducer\";\n\nfunction Post(props: StateProfilePagePostsItemType) {\n    return (\n        <div className={s.item}>\n            <img src=\"https://upload.wikimedia.org/wikipedia/ru/d/da/%D0%90%D0%B2%D0%B0%D1%82%D0%B0%D1%80_3.jpg\" alt=\"\"/>\n            {props.message}\n            <div>\n                <span>like</span> {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post","import React from \"react\";\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {StateProfilePagePostsItemType,} from \"../../../redux/profilePageReducer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Element} from \"../../common/FormsControl/FormsControl\";\n\n\nexport type MyPostsPropsType = {\n    posts: StateProfilePagePostsItemType[]\n    addPostHandler: (text: string) => void\n}\n\nfunction MyPosts(props: MyPostsPropsType) {\n\n    const onSubmit = (profileMyPostsFormData: MyPostsFormDataType) => {\n        props.addPostHandler(profileMyPostsFormData.profileMyPostsMessage)\n    }\n\n    let postsElement = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} id={p.id}/>).reverse()\n\n    return (\n        <div className={s.postsBlock}><h3>my posts</h3>\n            <ProfileAddMessageReduxForm onSubmit={onSubmit}/>\n            <div className={s.posts}>\n                {postsElement}\n            </div>\n        </div>\n    )\n}\n\nconst ProfileAddMessageReduxForm = reduxForm<MyPostsFormDataType>({form: 'profileMyPostsForm'})(ProfileAddMessageForm)\n\ntype MyPostsFormDataType = {\n    profileMyPostsMessage: string\n}\n\nconst maxLength10 = maxLengthCreator(10)\n\nconst TextArea = Element('textarea')\n\nfunction ProfileAddMessageForm(props: InjectedFormProps<MyPostsFormDataType>) {\n\n    return (\n        <>\n            <form onSubmit={props.handleSubmit}>\n                <div>\n                    <Field component={TextArea}\n                           name={'profileMyPostsMessage'}\n                           placeholder={'Enter your message'}\n                           validate={[required, maxLength10]}\n                    />\n                </div>\n                <div>\n                    <button>Add post</button>\n                </div>\n            </form>\n        </>\n    )\n}\n\nexport default MyPosts","import React from \"react\";\nimport {\n    ActionsProfilePageType,\n    addPostAC,\n    StateProfileObjectPageType,\n    StateProfilePagePostsItemType\n} from \"../../../redux/profilePageReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsType = {\n    posts: StateProfilePagePostsItemType[]\n}\n\ntype MapDispatchToPropsType = {\n    addPostHandler: (text: string) => void\n}\n\nconst mapStateToProps = (state: StateProfileObjectPageType): MapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n    }\n}\nconst mapDispatchToProps = (dispatch: (action: ActionsProfilePageType) => void): MapDispatchToPropsType => {\n    return {\n        addPostHandler:(text: string) => dispatch(addPostAC(text)),\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {ResponseProfilePageType} from \"../../redux/profilePageReducer\";\n\ntype ProfilePropsType = {\n    profile: ResponseProfilePageType | null\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nfunction Profile(props: ProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getUserProfile,\n    getUserStatus,\n    ResponseProfilePageType,\n    StateProfileObjectPageType, updateUserStatus\n} from \"../../redux/profilePageReducer\";\nimport {RouteComponentProps, withRouter} from 'react-router'\nimport {compose} from \"redux\";\nimport {StateAuthObjectType} from \"../../redux/authReducer\";\n\ntype mapStateToPropsType = {\n    profile: ResponseProfilePageType | null\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\ntype mapDispatchToPropsType = {\n    getUserProfile: (userId: number | null) => void\n    getUserStatus: (userId: number | null) => void\n    updateUserStatus: (status: string) => void\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType>\n    & mapStateToPropsType\n    & mapDispatchToPropsType\n\nexport class ProfileContainer extends React.Component<ProfileContainerPropsType>{\n\n    componentDidMount() {\n        let userId = Number(this.props.match.params.userId) || null\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) this.props.history.push('/login/')\n        }\n        this.props.getUserProfile(userId)\n        this.props.getUserStatus(userId)\n    }\n\n    render() {\n        return (\n            <Profile profile={this.props.profile} status={this.props.status} updateUserStatus={this.props.updateUserStatus}/>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StateProfileObjectPageType & StateAuthObjectType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth,\n    }\n}\n\nconst mapDispatchToProps = {\n    getUserProfile,\n    getUserStatus,\n    updateUserStatus,\n}\n\nexport default compose<React.FC>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withRouter)\n(ProfileContainer)"],"sourceRoot":""}