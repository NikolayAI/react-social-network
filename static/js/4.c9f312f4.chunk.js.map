{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","to","activeClassName","active","name","Message","message","maxLength50","maxLengthCreator","DialogsAddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","createField","required","TextareaElement","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","dialogsMyPostsFormData","addMessageAC","dialogsMyPostsMessage","mapStateToPropsForRedirect","isAuth","auth","mapDispatchToProps","dialogsActions","compose","connect","WrappedComponent","rest"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCepMC,EATmC,SAACC,GAC/C,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,QACd,kBAAC,IAAD,CAASC,GAAIL,EAAMM,gBAAiBH,IAAEI,QAASR,EAAMS,QCDlDC,EAJ6B,SAACV,GACzC,OAAO,yBAAKG,UAAWC,IAAEO,SAAUX,EAAMW,U,yBCqCvCC,EAAcC,YAAiB,IAkB/BC,EAA6BC,YAAsC,CACrEC,KAAM,sBADyBD,EAhBoD,SAACf,GACpF,OACI,oCACI,0BAAMiB,SAAUjB,EAAMkB,cAClB,6BACKC,YAA4C,qBACzC,wBAAyB,CAACC,IAAUR,GAAcS,MAE1D,6BACI,sDAYLC,EArD6B,SAACtB,GAEzC,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYC,IAAKD,EAAE1B,GAAIO,KAAMmB,EAAEnB,KAAMP,GAAI0B,EAAE1B,QACpF4B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASH,IAAKG,EAAE9B,GAAIS,QAASqB,EAAErB,QAAST,GAAI8B,EAAE9B,QAM7F,OACI,yBAAKC,UAAWC,IAAEsB,SACd,yBAAKvB,UAAWC,IAAE6B,cACbR,GAEL,yBAAKtB,UAAWC,IAAE2B,UACbD,EACD,kBAAChB,EAAD,CAA4BG,SAXJ,SAACiB,GACjClC,EAAMmC,aAAaD,EAAuBE,6B,uBCV5CC,EAA6B,SAACd,GAAD,MAA6D,CAC5Fe,OAAQf,EAAMgB,KAAKD,S,YCGjBE,EAAqB,CACvBL,aAAcM,IAAeN,cAGlBO,sBACXC,aAToB,SAACpB,GACrB,MAAO,CAACC,YAAaD,EAAMC,eAQFgB,IDLtB,SAA+BI,GAOlC,OAAOD,YACmBN,EAA4B,GAD/CM,EANiG,SAAC3C,GAC3EA,EAAnBsC,OADyG,IAC9FO,EAD6F,YACrF7C,EADqF,YAE/G,OAAKA,EAAMsC,OACJ,kBAACM,EAAqBC,GADH,kBAAC,IAAD,CAAUvC,GAAI,iBCCjCoC,CAGdpB","file":"static/js/4.c9f312f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import s from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\nimport {StateDialogsPageDialogsItemType} from \"../../../redux/dialogsPageReducer\";\n\ntype DialogItemPropsType = StateDialogsPageDialogsItemType\n\nconst DialogItem: React.FC<DialogItemPropsType> = (props) => {\n    let path = '/dialogs/' + props.id\n    return (\n        <div className={s.dialog}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem","import s from \"../Dialogs.module.css\";\nimport React from \"react\";\nimport {StateDialogsPageMessagesItemType} from \"../../../redux/dialogsPageReducer\";\n\nexport type MessagePropsType = StateDialogsPageMessagesItemType\n\nconst Message: React.FC<MessagePropsType> = (props) => {\n    return <div className={s.message}>{props.message}</div>\n}\n\nexport default Message","import React from \"react\";\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {StateDialogsPageType,} from \"../../redux/dialogsPageReducer\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, TextareaElement} from \"../common/FormsControl/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\ntype DialogsPropsType = {\n    dialogsPage: StateDialogsPageType\n    addMessageAC: (text: string) => void\n}\n\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\n\n    let state = props.dialogsPage\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message} id={m.id}/>)\n\n    const addNewDialogsMyPostsMessage = (dialogsMyPostsFormData: DialogsMyPostsFormDataType) => {\n        props.addMessageAC(dialogsMyPostsFormData.dialogsMyPostsMessage)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <DialogsAddMessageReduxForm onSubmit={addNewDialogsMyPostsMessage}/>\n            </div>\n        </div>\n    )\n}\n\ntype DialogsMyPostsFormDataType = {\n    dialogsMyPostsMessage:string\n}\n\ntype DialogsMyPostsFormDataKeysType = Extract<keyof DialogsMyPostsFormDataType, string>\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst DialogsAddMessageForm: React.FC<InjectedFormProps<DialogsMyPostsFormDataType>> = (props) => {\n    return (\n        <>\n            <form onSubmit={props.handleSubmit}>\n                <div>\n                    {createField<DialogsMyPostsFormDataKeysType>('Enter your message',\n                        'dialogsMyPostsMessage', [required, maxLength50], TextareaElement)}\n                </div>\n                <div>\n                    <button>Send message</button>\n                </div>\n            </form>\n        </>\n    )\n}\n\nconst DialogsAddMessageReduxForm = reduxForm<DialogsMyPostsFormDataType>({\n    form: 'dialogsMyPostsForm'\n})(DialogsAddMessageForm)\n\n\nexport default Dialogs","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {GlobalStateType} from \"../redux/reduxStore\";\n\ntype mapStateToPropsForRedirectType = {\n    isAuth: boolean\n}\n\ntype mapDispatchToPropsForRedirectType = {\n}\n\nconst mapStateToPropsForRedirect = (state: GlobalStateType): mapStateToPropsForRedirectType => ({\n    isAuth: state.auth.isAuth,\n})\n\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<mapStateToPropsForRedirectType & mapDispatchToPropsForRedirectType> = (props) => {\n        const {isAuth, ...rest} = props\n        if (!props.isAuth) return <Redirect to={'/login/'}/>\n        return <WrappedComponent {...rest as WCP}/>\n    }\n\n    return connect<mapStateToPropsForRedirectType, mapDispatchToPropsForRedirectType,\n        WCP, GlobalStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\n}","import React from \"react\";\nimport {dialogsActions, StateDialogsPageType} from \"../../redux/dialogsPageReducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {GlobalStateType} from \"../../redux/reduxStore\";\n\ntype MapStateToPropsType = {\n    dialogsPage: StateDialogsPageType\n}\n\nconst mapStateToProps = (state: GlobalStateType): MapStateToPropsType => {\n    return {dialogsPage: state.dialogsPage,}\n}\n\nconst mapDispatchToProps = {\n    addMessageAC: dialogsActions.addMessageAC,\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect)\n(Dialogs)"],"sourceRoot":""}