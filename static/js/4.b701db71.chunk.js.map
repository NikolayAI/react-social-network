{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","to","activeClassName","active","name","Message","message","DialogsAddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","maxLength50","maxLengthCreator","Element","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","isAuth","dialogsItems","dialogsMyPostsFormData","addMessageAC","dialogsMyPostsMessage","mapStateToPropsForRedirect","auth","mapDispatchToProps","compose","connect","Component","RedirectComponent","this","React"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCapMC,MAPf,SAAoBC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,QAAQ,kBAAC,IAAD,CAASC,GAAIL,EAAMM,gBAAiBH,IAAEI,QAASR,EAAMS,QCExEC,MANf,SAAiBV,GACb,OACI,yBAAKG,UAAWC,IAAEO,SAAUX,EAAMW,U,yCCkC1C,IAAMC,EAA6BC,YAAsC,CAACC,KAAM,sBAA7CD,EAUnC,SAA+Bb,GAC3B,OACI,oCACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,EACXV,KAAM,wBACNW,YAAa,qBACbC,SAAU,CAACC,IAAUC,MAGhC,6BACI,sDAhBdA,EAAcC,YAAiB,IAE/BL,EAAWM,YAAQ,YAqBVC,MAvDf,SAAiB1B,GAEb,IAAI2B,EAAQ3B,EAAM4B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYC,IAAKD,EAAE9B,GAAIO,KAAMuB,EAAEvB,KAAMP,GAAI8B,EAAE9B,QACpFgC,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASH,IAAKG,EAAElC,GAAIS,QAASyB,EAAEzB,QAAST,GAAIkC,EAAElC,QAM7F,OAAKF,EAAMqC,OAGP,yBAAKlC,UAAWC,IAAE0B,SACd,yBAAK3B,UAAWC,IAAEkC,cACbT,GAEL,yBAAK1B,UAAWC,IAAE+B,UACbD,EACD,kBAACtB,EAAD,CAA4BG,SAbJ,SAACwB,GACjCvC,EAAMwC,aAAaD,EAAuBE,4BAGpB,kBAAC,IAAD,CAAUnC,GAAI,a,wCClBtCoC,EAA6B,SAACf,GAChC,MAAO,CAACU,OAAQV,EAAMgB,KAAKN,S,OCQzBO,EAAqB,CACvBJ,kBAGWK,sBACXC,aAToB,SAACnB,GACrB,MAAO,CAACC,YAAaD,EAAMC,eAQFgB,IDVG,SAACG,GAAyB,IAChDC,EAD+C,uKAG7C,OAAKC,KAAKjD,MAAMqC,OACT,kBAACU,EAAcE,KAAKjD,OADI,kBAAC,IAAD,CAAUM,GAAI,gBAHA,GACrB4C,IAAMH,WAMtC,OAAOD,YAAQJ,EAARI,CAAoCE,KCEhCH,CAGdnB","file":"static/js/4.b701db71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import s from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\nimport { StateDialogsPageDialogsItemType } from \"../../../redux/dialogsPageReducer\";\n\ntype DialogItemPropsType = StateDialogsPageDialogsItemType\n\nfunction DialogItem(props: DialogItemPropsType) {\n    let path = '/dialogs/' + props.id\n    return (\n        <div className={s.dialog}><NavLink to={path} activeClassName={s.active}>{props.name}</NavLink></div>\n    )\n}\n\nexport default DialogItem","import s from \"../Dialogs.module.css\";\nimport React from \"react\";\nimport {StateDialogsPageMessagesItemType} from \"../../../redux/dialogsPageReducer\";\n\nexport type MessagePropsType = StateDialogsPageMessagesItemType\n\nfunction Message(props: MessagePropsType) {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\n\nexport default Message","import React from \"react\";\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {StateDialogsPageType,} from \"../../redux/dialogsPageReducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Element} from \"../common/FormsControl/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\ntype DialogsPropsType = {\n    dialogsPage: StateDialogsPageType\n    addMessageAC: (text: string) => void\n    isAuth: boolean\n}\n\nfunction Dialogs(props: DialogsPropsType) {\n\n    let state = props.dialogsPage\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message} id={m.id}/>)\n\n    const addNewDialogsMyPostsMessage = (dialogsMyPostsFormData: DialogsMyPostsFormDataType) => {\n        props.addMessageAC(dialogsMyPostsFormData.dialogsMyPostsMessage)\n    }\n\n    if (!props.isAuth) return <Redirect to={'/login/'}/>\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <DialogsAddMessageReduxForm onSubmit={addNewDialogsMyPostsMessage}/>\n            </div>\n        </div>\n    )\n}\n\nconst DialogsAddMessageReduxForm = reduxForm<DialogsMyPostsFormDataType>({form: 'dialogsMyPostsForm'})(DialogsAddMessageForm)\n\ntype DialogsMyPostsFormDataType = {\n    dialogsMyPostsMessage:string\n}\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst TextArea = Element('textarea')\n\nfunction DialogsAddMessageForm(props: InjectedFormProps<DialogsMyPostsFormDataType>) {\n    return (\n        <>\n            <form onSubmit={props.handleSubmit}>\n                <div>\n                    <Field component={TextArea}\n                           name={'dialogsMyPostsMessage'}\n                           placeholder={'Enter your message'}\n                           validate={[required, maxLength50]}\n                    />\n                </div>\n                <div>\n                    <button>Send message</button>\n                </div>\n            </form>\n        </>\n    )\n}\n\nexport default Dialogs","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {StateAuthObjectType} from \"../redux/authReducer\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsForRedirectType = {\n    isAuth: boolean\n}\n\nconst mapStateToPropsForRedirect = (state: StateAuthObjectType): mapStateToPropsForRedirectType => {\n    return {isAuth: state.auth.isAuth,}\n}\n\nexport const withAuthRedirect = (Component: any): any => {\n    class RedirectComponent extends React.Component<any>{\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login/'}/>\n            return <Component {...this.props}/>\n        }\n    }\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}","import React from \"react\";\nimport {addMessageAC, StateDialogsObjectPageType, StateDialogsPageType} from \"../../redux/dialogsPageReducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {StateAuthObjectType} from \"../../redux/authReducer\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\ntype MapStateToPropsType = {\n    dialogsPage: StateDialogsPageType\n}\n\ntype MapStateToPropsStateMergeType = StateDialogsObjectPageType & StateAuthObjectType\n\nconst mapStateToProps = (state: MapStateToPropsStateMergeType): MapStateToPropsType => {\n    return {dialogsPage: state.dialogsPage,}\n}\n\nconst mapDispatchToProps = {\n    addMessageAC,\n}\n\nexport default compose<React.FC>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect)\n(Dialogs)"],"sourceRoot":""}