{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","autoFocus","onChange","e","currentTarget","value","onBlur","updateUserStatus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","profile","handleSubmit","offEditMode","error","onSubmit","onClick","className","style","formSummaryError","createField","InputElement","type","TextareaElement","Object","keys","contacts","map","key","s","contact","toLocaleLowerCase","ProfileData","isOwner","onEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contacts","ProfileInfo","onSavePhoto","saveProfile","divContentImg","src","alt","descriptionBlock","photos","large","userPhoto","mainPhoto","Preloader","target","files","length","formData","then","Post","item","message","likesCount","maxLength10","maxLengthCreator","ProfileAddMessageReduxForm","required","MyPosts","postsElement","posts","p","id","reverse","postsBlock","profileMyPostsFormData","addPostHandler","profileMyPostsMessage","mapDispatchToProps","profileActions","addPostAC","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","refreshProfile","userId","Number","match","params","authorizedUserId","history","push","Error","getUserProfile","getUserStatus","this","prevProps","prevState","savePhoto","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.18c2a97f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"divContentImg\":\"ProfileInfo_divContentImg__3ruaB\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {useEffect, useState} from \"react\";\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nconst ProfileStatus: React.FC<ProfileStatusPropsType> = (props) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n\n    const activateEditModeHandler = () => setEditMode(true)\n    const deActivateEditModeHandler = () => {\n        setEditMode(false)\n        props.updateUserStatus(status)\n    }\n    const statusChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    return <>\n            <b>Status: </b>\n            {editMode\n                ? <input autoFocus={true} onChange={statusChangeHandler} onBlur={deActivateEditModeHandler}\n                              value={status}/>\n                : <span onDoubleClick={activateEditModeHandler}>{props.status || '-------'}</span>}\n        </>\n\n\n}\n\nexport default ProfileStatus","import React from \"react\";\nimport {createField, GetStringKeys, InputElement, TextareaElement} from \"../../common/FormsControl/FormsControl\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from './ProfileInfo.module.css'\nimport style from \"../../common/FormsControl/FormsControl.module.css\";\nimport {ResponseProfileType} from \"../../../types/types\";\n\nexport type ProfileDataFormFormDataType = {\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    aboutMe: string\n}\n\ntype ProfileDataFormPropsType = {\n    profile: ResponseProfileType | null\n    offEditMode: () => void\n}\n\ntype ProfileDataFormFormDataKeysType = GetStringKeys<ProfileDataFormFormDataType>\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormFormDataType,\n    ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({profile, handleSubmit,\n                                                                                     offEditMode, error}) => {\n\n    return <form onSubmit={handleSubmit}>\n        <button>save</button><button onClick={offEditMode}>cancel</button>\n        {error && <div className={style.formSummaryError}>{error}</div>}\n        <div><b>Full name</b>:\n            {createField<ProfileDataFormFormDataKeysType>('Full name', 'fullName', [], InputElement)}\n        </div>\n        <div><b>Looking for a job</b>:\n            {createField<ProfileDataFormFormDataKeysType>('Looking for a job', 'lookingForAJob', [], InputElement, {type: 'checkbox'})}\n        </div>\n        <div><b>My professional skills</b>:\n            {createField<ProfileDataFormFormDataKeysType>('My professional skills', 'lookingForAJobDescription', [], TextareaElement)}\n        </div>\n        <div><b>About me</b>:\n            {createField<ProfileDataFormFormDataKeysType>('About me', 'aboutMe', [], TextareaElement)}\n        </div>\n        <div><b>Contacts</b>: {Object.keys(profile !== null && profile.contacts).map(key => {\n            return <div key={key} className={s.contact}>\n                <b>{key}:</b>{createField(key, 'contacts.' + key.toLocaleLowerCase(), [], InputElement)}\n            </div>\n        })}</div>\n    </form>\n}\n\nconst ProfileDataReduxForm = reduxForm<ProfileDataFormFormDataType, ProfileDataFormPropsType>({form: 'editProfile'})(ProfileDataForm)\n\nexport default ProfileDataReduxForm","import React, {useState} from \"react\";\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\nimport userPhoto\n    from \"../../../assets/images/avatar-user-computer-icons-software-developer-png-favpng-7SbFpNeqKqhhTrrrnHFUqk6U4.jpg\";\nimport ProfileDataReduxForm, {ProfileDataFormFormDataType} from \"./ProfileDataForm\";\nimport {ResponseContactsType, ResponseProfileType} from \"../../../types/types\";\n\ntype ProfileInfoPropsType = {\n    isOwner: boolean\n    profile: ResponseProfileType | null\n    status: string\n    updateUserStatus: (status: string) => void\n    onSavePhoto: (file: File) => void\n    saveProfile: (data: ProfileDataFormFormDataType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\n                                                         profile, status,\n                                                         updateUserStatus, isOwner, onSavePhoto, saveProfile\n                                                     }) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const mainPhotoSelectedHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.target.files?.length && onSavePhoto(e.target.files[0])\n    }\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => setEditMode(false)\n\n    const onSubmit = (formData: ProfileDataFormFormDataType) => {\n        saveProfile(formData).then(() => offEditMode())\n    }\n\n\n    return (\n        <div>\n            <div className={s.divContentImg}><img className='contentImg' src=\"\" alt=\"\"/></div>\n            <div className={s.descriptionBlock}>\n                {profile ? <img src={profile.photos.large || userPhoto} alt=\"profile photo\" className={s.mainPhoto}/> :\n                    <Preloader/>}\n                {isOwner && <input type=\"file\" onChange={mainPhotoSelectedHandler}/>}\n                <div><ProfileStatus status={status} updateUserStatus={updateUserStatus}/></div>\n                {editMode\n                    ? <ProfileDataReduxForm profile={profile}\n                                            onSubmit={onSubmit}\n                                            offEditMode={offEditMode}\n                    />\n                    : <ProfileData profile={profile} isOwner={isOwner} onEditMode={onEditMode}/>\n                }\n            </div>\n        </div>\n    )\n}\n\ntype ProfileDataPropsType = {\n    profile: ResponseProfileType | null\n    isOwner: boolean\n    onEditMode: () => void\n}\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, onEditMode}) => {\n    return <>\n        {isOwner && <button onClick={onEditMode}>edit</button>}\n        <div><b>Full name</b>: {profile?.fullName}</div>\n        <div><b>Looking for a job</b>: {profile?.lookingForAJob ? 'yes' : 'no'}</div>\n        {profile?.lookingForAJob && <div><b>My professional skills</b>: {profile?.lookingForAJobDescription}</div>}\n        <div><b>About me</b>: {profile?.aboutMe}</div>\n        <div><b>Contacts</b>: {Object.keys(profile !== null && profile.contacts).map(key => {\n            return <Contacts key={key}\n                            contactTitle={key}\n                            contactValue={profile?.contacts[key as keyof ResponseContactsType]}/>\n        })}</div>\n    </>\n}\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string | null | undefined\n}\nexport const Contacts: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo","import React from \"react\";\nimport s from './Post.module.css'\nimport {StateProfilePagePostsItemType} from \"../../../../redux/profilePageReducer\";\n\nconst Post: React.FC<StateProfilePagePostsItemType> = (props) => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://upload.wikimedia.org/wikipedia/ru/d/da/%D0%90%D0%B2%D0%B0%D1%82%D0%B0%D1%80_3.jpg\" alt=\"\"/>\n            {props.message}\n            <div>\n                <span>like</span> {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post","import React from \"react\";\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {createField, GetStringKeys, TextareaElement} from \"../../common/FormsControl/FormsControl\";\nimport {StateProfilePagePostsItemType} from \"../../../redux/profilePageReducer\";\n\n\nexport type MyPostsPropsType = {\n    posts: StateProfilePagePostsItemType[]\n    addPostHandler: (text: string) => void\n}\n\nconst MyPosts = (props: MyPostsPropsType) => {\n\n    const onSubmit = (profileMyPostsFormData: MyPostsFormDataType) => {\n        props.addPostHandler(profileMyPostsFormData.profileMyPostsMessage)\n    }\n\n    let postsElement = props.posts.map(\n        p => <Post key={p.id} message={p.message} likesCount={p.likesCount} id={p.id}/>\n        ).reverse()\n\n    return (\n        <div className={s.postsBlock}><h3>my posts</h3>\n            <ProfileAddMessageReduxForm onSubmit={onSubmit}/>\n            <div className={s.posts}>\n                {postsElement}\n            </div>\n        </div>\n    )\n}\n\ntype MyPostsFormDataType = {\n    profileMyPostsMessage: string\n}\n\ntype ProfileMyPostsFormDataKeysType = GetStringKeys<MyPostsFormDataType>\n\nconst maxLength10 = maxLengthCreator(10)\n\nconst ProfileAddMessageForm: React.FC<InjectedFormProps<MyPostsFormDataType>> = (props) => {\n\n    return (\n        <>\n            <form onSubmit={props.handleSubmit}>\n                <div>\n                    {createField<ProfileMyPostsFormDataKeysType>('Enter your message',\n                        'profileMyPostsMessage', [required, maxLength10], TextareaElement)}\n                </div>\n                <div>\n                    <button>Add post</button>\n                </div>\n            </form>\n        </>\n    )\n\n}\n\nconst ProfileAddMessageReduxForm = reduxForm<MyPostsFormDataType>({\n    form: 'profileMyPostsForm'\n})(ProfileAddMessageForm)\n\nexport default MyPosts\n","import React from \"react\";\nimport {\n    profileActions,\n    StateProfileObjectPageType,\n    StateProfilePagePostsItemType\n} from \"../../../redux/profilePageReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {GlobalStateType} from \"../../../redux/reduxStore\";\n\ntype MapStateToPropsType = {\n    posts: StateProfilePagePostsItemType[]\n}\n\ntype MapDispatchToPropsType = {\n    addPostHandler: (text: string) => void\n}\n\nconst mapStateToProps = (state: StateProfileObjectPageType): MapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n    }\n}\nconst mapDispatchToProps: MapDispatchToPropsType = {\n    addPostHandler: profileActions.addPostAC,\n}\n\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, GlobalStateType>(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {ResponseProfileType} from \"../../types/types\";\n\ntype ProfilePropsType = {\n    isOwner: boolean\n    profile: ResponseProfileType | null\n    status: string\n    updateUserStatus: (status: string) => void\n    onSavePhoto: (file: File) => void\n    saveProfile: (data: any) => Promise<any>\n}\n\nconst Profile: React.FC<ProfilePropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo\n                isOwner={props.isOwner}\n                profile={props.profile}\n                status={props.status}\n                updateUserStatus={props.updateUserStatus}\n                onSavePhoto={props.onSavePhoto}\n                saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getUserProfile,\n    getUserStatus,\n    savePhoto, saveProfile,\n    StateProfileObjectPageType, updateUserStatus\n} from \"../../redux/profilePageReducer\";\nimport {RouteComponentProps, withRouter} from 'react-router'\nimport {compose} from \"redux\";\nimport {StateAuthObjectType} from \"../../redux/authReducer\";\nimport {ResponseProfileType} from \"../../types/types\";\n\ntype mapStateToPropsType = {\n    profile: ResponseProfileType | null\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\ntype mapDispatchToPropsType = {\n    getUserProfile: (userId: number | null) => void\n    getUserStatus: (userId: number | null) => void\n    updateUserStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (data: any) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType>\n    & mapStateToPropsType\n    & mapDispatchToPropsType\n\n// const urlParams = new URLSearchParams(window.location.search);\n// const id = urlParams.get('id');\n\nexport class ProfileContainer extends React.Component<ProfileContainerPropsType>{\n\n    refreshProfile = () => {\n        let userId = Number(this.props.match.params.userId) || null\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) this.props.history.push('/login/')\n        }\n        if (!userId) {\n            throw new Error('ID should exists in URI params or in state(\"authorizedUserId\")')\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getUserStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: ProfileContainerPropsType, prevState: ProfileContainerPropsType) {\n        if(this.props.match.params.userId !== prevProps.match.params.userId) this.refreshProfile()\n    }\n\n    render() {\n        return (\n            <Profile\n                isOwner={!this.props.match.params.userId}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateUserStatus={this.props.updateUserStatus}\n                onSavePhoto={this.props.savePhoto}\n                saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\ntype MergedMapStateToPropsArgumentType = StateProfileObjectPageType & StateAuthObjectType\n\nconst mapStateToProps = (state: MergedMapStateToPropsArgumentType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth,\n    }\n}\n\nconst mapDispatchToProps = {\n    getUserProfile,\n    getUserStatus,\n    updateUserStatus,\n    savePhoto,\n    saveProfile,\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withRouter)\n(ProfileContainer)"],"sourceRoot":""}